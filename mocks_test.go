// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/setare/services (interfaces: ResourceService,ServerService,Reporter,Configurable,RetrierReporter)

// Package services_test is a generated GoMock package.
package services_test

import (
	context "context"
	os "os"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	services "github.com/setare/services"
)

// MockResourceService is a mock of ResourceService interface.
type MockResourceService struct {
	ctrl     *gomock.Controller
	recorder *MockResourceServiceMockRecorder
}

// MockResourceServiceMockRecorder is the mock recorder for MockResourceService.
type MockResourceServiceMockRecorder struct {
	mock *MockResourceService
}

// NewMockResourceService creates a new mock instance.
func NewMockResourceService(ctrl *gomock.Controller) *MockResourceService {
	mock := &MockResourceService{ctrl: ctrl}
	mock.recorder = &MockResourceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceService) EXPECT() *MockResourceServiceMockRecorder {
	return m.recorder
}

// Name mocks base method.
func (m *MockResourceService) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockResourceServiceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockResourceService)(nil).Name))
}

// Start mocks base method.
func (m *MockResourceService) Start(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockResourceServiceMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockResourceService)(nil).Start), arg0)
}

// Stop mocks base method.
func (m *MockResourceService) Stop(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockResourceServiceMockRecorder) Stop(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockResourceService)(nil).Stop), arg0)
}

// MockServerService is a mock of ServerService interface.
type MockServerService struct {
	ctrl     *gomock.Controller
	recorder *MockServerServiceMockRecorder
}

// MockServerServiceMockRecorder is the mock recorder for MockServerService.
type MockServerServiceMockRecorder struct {
	mock *MockServerService
}

// NewMockServerService creates a new mock instance.
func NewMockServerService(ctrl *gomock.Controller) *MockServerService {
	mock := &MockServerService{ctrl: ctrl}
	mock.recorder = &MockServerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerService) EXPECT() *MockServerServiceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockServerService) Close(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockServerServiceMockRecorder) Close(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockServerService)(nil).Close), arg0)
}

// Listen mocks base method.
func (m *MockServerService) Listen(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Listen", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Listen indicates an expected call of Listen.
func (mr *MockServerServiceMockRecorder) Listen(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listen", reflect.TypeOf((*MockServerService)(nil).Listen), arg0)
}

// Name mocks base method.
func (m *MockServerService) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockServerServiceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockServerService)(nil).Name))
}

// MockReporter is a mock of Reporter interface.
type MockReporter struct {
	ctrl     *gomock.Controller
	recorder *MockReporterMockRecorder
}

// MockReporterMockRecorder is the mock recorder for MockReporter.
type MockReporterMockRecorder struct {
	mock *MockReporter
}

// NewMockReporter creates a new mock instance.
func NewMockReporter(ctrl *gomock.Controller) *MockReporter {
	mock := &MockReporter{ctrl: ctrl}
	mock.recorder = &MockReporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReporter) EXPECT() *MockReporterMockRecorder {
	return m.recorder
}

// AfterLoad mocks base method.
func (m *MockReporter) AfterLoad(arg0 context.Context, arg1 services.Configurable, arg2 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AfterLoad", arg0, arg1, arg2)
}

// AfterLoad indicates an expected call of AfterLoad.
func (mr *MockReporterMockRecorder) AfterLoad(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterLoad", reflect.TypeOf((*MockReporter)(nil).AfterLoad), arg0, arg1, arg2)
}

// AfterStart mocks base method.
func (m *MockReporter) AfterStart(arg0 context.Context, arg1 services.Service, arg2 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AfterStart", arg0, arg1, arg2)
}

// AfterStart indicates an expected call of AfterStart.
func (mr *MockReporterMockRecorder) AfterStart(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterStart", reflect.TypeOf((*MockReporter)(nil).AfterStart), arg0, arg1, arg2)
}

// AfterStop mocks base method.
func (m *MockReporter) AfterStop(arg0 context.Context, arg1 services.Service, arg2 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AfterStop", arg0, arg1, arg2)
}

// AfterStop indicates an expected call of AfterStop.
func (mr *MockReporterMockRecorder) AfterStop(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterStop", reflect.TypeOf((*MockReporter)(nil).AfterStop), arg0, arg1, arg2)
}

// BeforeLoad mocks base method.
func (m *MockReporter) BeforeLoad(arg0 context.Context, arg1 services.Configurable) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BeforeLoad", arg0, arg1)
}

// BeforeLoad indicates an expected call of BeforeLoad.
func (mr *MockReporterMockRecorder) BeforeLoad(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeLoad", reflect.TypeOf((*MockReporter)(nil).BeforeLoad), arg0, arg1)
}

// BeforeStart mocks base method.
func (m *MockReporter) BeforeStart(arg0 context.Context, arg1 services.Service) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BeforeStart", arg0, arg1)
}

// BeforeStart indicates an expected call of BeforeStart.
func (mr *MockReporterMockRecorder) BeforeStart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeStart", reflect.TypeOf((*MockReporter)(nil).BeforeStart), arg0, arg1)
}

// BeforeStop mocks base method.
func (m *MockReporter) BeforeStop(arg0 context.Context, arg1 services.Service) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BeforeStop", arg0, arg1)
}

// BeforeStop indicates an expected call of BeforeStop.
func (mr *MockReporterMockRecorder) BeforeStop(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeStop", reflect.TypeOf((*MockReporter)(nil).BeforeStop), arg0, arg1)
}

// SignalReceived mocks base method.
func (m *MockReporter) SignalReceived(arg0 os.Signal) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SignalReceived", arg0)
}

// SignalReceived indicates an expected call of SignalReceived.
func (mr *MockReporterMockRecorder) SignalReceived(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignalReceived", reflect.TypeOf((*MockReporter)(nil).SignalReceived), arg0)
}

// MockConfigurable is a mock of Configurable interface.
type MockConfigurable struct {
	ctrl     *gomock.Controller
	recorder *MockConfigurableMockRecorder
}

// MockConfigurableMockRecorder is the mock recorder for MockConfigurable.
type MockConfigurableMockRecorder struct {
	mock *MockConfigurable
}

// NewMockConfigurable creates a new mock instance.
func NewMockConfigurable(ctrl *gomock.Controller) *MockConfigurable {
	mock := &MockConfigurable{ctrl: ctrl}
	mock.recorder = &MockConfigurableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigurable) EXPECT() *MockConfigurableMockRecorder {
	return m.recorder
}

// Load mocks base method.
func (m *MockConfigurable) Load(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Load indicates an expected call of Load.
func (mr *MockConfigurableMockRecorder) Load(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockConfigurable)(nil).Load), arg0)
}

// MockRetrierReporter is a mock of RetrierReporter interface.
type MockRetrierReporter struct {
	ctrl     *gomock.Controller
	recorder *MockRetrierReporterMockRecorder
}

// MockRetrierReporterMockRecorder is the mock recorder for MockRetrierReporter.
type MockRetrierReporterMockRecorder struct {
	mock *MockRetrierReporter
}

// NewMockRetrierReporter creates a new mock instance.
func NewMockRetrierReporter(ctrl *gomock.Controller) *MockRetrierReporter {
	mock := &MockRetrierReporter{ctrl: ctrl}
	mock.recorder = &MockRetrierReporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRetrierReporter) EXPECT() *MockRetrierReporterMockRecorder {
	return m.recorder
}

// AfterLoad mocks base method.
func (m *MockRetrierReporter) AfterLoad(arg0 context.Context, arg1 services.Configurable, arg2 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AfterLoad", arg0, arg1, arg2)
}

// AfterLoad indicates an expected call of AfterLoad.
func (mr *MockRetrierReporterMockRecorder) AfterLoad(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterLoad", reflect.TypeOf((*MockRetrierReporter)(nil).AfterLoad), arg0, arg1, arg2)
}

// AfterStart mocks base method.
func (m *MockRetrierReporter) AfterStart(arg0 context.Context, arg1 services.Service, arg2 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AfterStart", arg0, arg1, arg2)
}

// AfterStart indicates an expected call of AfterStart.
func (mr *MockRetrierReporterMockRecorder) AfterStart(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterStart", reflect.TypeOf((*MockRetrierReporter)(nil).AfterStart), arg0, arg1, arg2)
}

// AfterStop mocks base method.
func (m *MockRetrierReporter) AfterStop(arg0 context.Context, arg1 services.Service, arg2 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AfterStop", arg0, arg1, arg2)
}

// AfterStop indicates an expected call of AfterStop.
func (mr *MockRetrierReporterMockRecorder) AfterStop(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterStop", reflect.TypeOf((*MockRetrierReporter)(nil).AfterStop), arg0, arg1, arg2)
}

// BeforeLoad mocks base method.
func (m *MockRetrierReporter) BeforeLoad(arg0 context.Context, arg1 services.Configurable) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BeforeLoad", arg0, arg1)
}

// BeforeLoad indicates an expected call of BeforeLoad.
func (mr *MockRetrierReporterMockRecorder) BeforeLoad(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeLoad", reflect.TypeOf((*MockRetrierReporter)(nil).BeforeLoad), arg0, arg1)
}

// BeforeRetry mocks base method.
func (m *MockRetrierReporter) BeforeRetry(arg0 context.Context, arg1 services.Service, arg2 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BeforeRetry", arg0, arg1, arg2)
}

// BeforeRetry indicates an expected call of BeforeRetry.
func (mr *MockRetrierReporterMockRecorder) BeforeRetry(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeRetry", reflect.TypeOf((*MockRetrierReporter)(nil).BeforeRetry), arg0, arg1, arg2)
}

// BeforeStart mocks base method.
func (m *MockRetrierReporter) BeforeStart(arg0 context.Context, arg1 services.Service) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BeforeStart", arg0, arg1)
}

// BeforeStart indicates an expected call of BeforeStart.
func (mr *MockRetrierReporterMockRecorder) BeforeStart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeStart", reflect.TypeOf((*MockRetrierReporter)(nil).BeforeStart), arg0, arg1)
}

// BeforeStop mocks base method.
func (m *MockRetrierReporter) BeforeStop(arg0 context.Context, arg1 services.Service) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BeforeStop", arg0, arg1)
}

// BeforeStop indicates an expected call of BeforeStop.
func (mr *MockRetrierReporterMockRecorder) BeforeStop(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeStop", reflect.TypeOf((*MockRetrierReporter)(nil).BeforeStop), arg0, arg1)
}

// SignalReceived mocks base method.
func (m *MockRetrierReporter) SignalReceived(arg0 os.Signal) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SignalReceived", arg0)
}

// SignalReceived indicates an expected call of SignalReceived.
func (mr *MockRetrierReporterMockRecorder) SignalReceived(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignalReceived", reflect.TypeOf((*MockRetrierReporter)(nil).SignalReceived), arg0)
}
